#ifndef HEAP_H
#define HEAP_H
#include <ranges>

class MinHeap {
public:
    MinHeap(int capacity): capacity(capacity) {
        size = 0;
        keyArray = new int[capacity];
        heapArray = new int[capacity];
        position = new int[capacity];
        for (int i = 0; i < capacity; i++) {
            keyArray[i] = INT_MAX;
            heapArray[i] = -1;
            position[i] = -1;
        }
    }

    ~MinHeap() {
        delete[] keyArray;
        delete[] heapArray;
        delete[] position;
    }

    void insert(int vertex, int key){
        heapArray[size] = vertex;
        keyArray[vertex] = key;
        position[vertex] = size;
        minHeapifyUp(size);
        size++;
    }

    //2 * i + 1 left child
    //2 * i + 2 right child

    //(i - 1) / 2
    int extractMin() {
        int minTemp = heapArray[0];
        size--;
        heapArray[0] = heapArray[size];
        heapArray[size] = -1;
        keyArray[minTemp] = INT_MAX;
        position[minTemp] = -1;
        if (size == 0) {
            heapArray[0] = -1;
        }
        else {
            position[heapArray[0]] = 0;
        }
        minHeapifyDown(0);
        return minTemp;
    }

    void decreaseKey(int vertex, int newKey) {
        if (keyArray[vertex] > newKey) {
            keyArray[vertex] = newKey;
            minHeapifyUp(position[vertex]);//index of the vertex
        }
    }

    int getKey(int vertex) {
        return keyArray[vertex];
    }

    int getKeyOfMin() {
        return keyArray[heapArray[0]];
    }

    int getVertexOfMin() {
        return heapArray[0];
    }

    //keyarray[vertex]
    bool isInMinHeap(int vertex) {
        return position[vertex] != -1;
    }

    bool isEmpty() {
        return size == 0;
    }

    void minHeapifyUp(int idx) {
        int parent = getParentPosition(idx);
        if (keyArray[heapArray[parent]] > keyArray[heapArray[idx]]) {

            int tmp = heapArray[parent];
            heapArray[parent] = heapArray[idx];
            heapArray[idx] = tmp;

            int positionTemp = position[heapArray[parent]];
            position[heapArray[parent]] = position[heapArray[idx]];
            position[heapArray[idx]] = positionTemp;
            minHeapifyUp(parent);
        }
    }

    void print() {
        printf("Key Array: ");
        for (int i = 0; i < capacity; i++) {
            printf("%d, ", keyArray[i]);
        }
        printf("\n");
        printf("Heap Array: ");
        for (int i = 0; i < capacity; i++) {
            printf("%d, ", heapArray[i]);
        }
        printf("\n");
        printf("Position Array: ");
        for (int i = 0; i < capacity; i++) {
            printf("%d, ", position[i]);
        }
        printf("\n");
    }
    // idx = 6
    // heaparray[idx] = 2
    //  position[heapArray[idx]] = 2
    //keyArray[heapArray[idx]] = 4

    //parent = 2
    //heapArray[parent] = 5
    //position[heapArray[parent]] = 6
    //postionTemp = 2
    //keyArray[heapArray[parent] = 5

    //tmp = 5

    //[7,6,4,8,1,5,3] key array
    //[4,6,2,1,0,3,5] heapArray
    //[4,3,2,5,0,6,1] position

    int getParentPosition(int idx) {
        return (idx - 1) / 2;
    }

    int getLeftChildPosition(int idx) {
        return idx * 2 + 1;
    }
    int getRightChildPosition(int idx) {
        return idx * 2 + 2;
    }

    void minHeapifyDown(int idx) {
        int left = getLeftChildPosition(idx);
        int right = getRightChildPosition(idx);
        int smallest = idx;
        if (keyArray[heapArray[left]] > keyArray[heapArray[right]] && keyArray[heapArray[idx]] > keyArray[heapArray[right]]) {
            smallest = right;
        }
        else if (keyArray[heapArray[right]] > keyArray[heapArray[left]] && keyArray[heapArray[idx]] > keyArray[heapArray[left]]) {
            smallest = left;
        }
        if (smallest != idx) {
            int tmp = heapArray[smallest];
            heapArray[smallest] = heapArray[idx];
            heapArray[idx] = tmp;

            int positionTemp = position[heapArray[smallest]];
            position[heapArray[smallest]] = position[heapArray[idx]];
            position[heapArray[idx]] = positionTemp;
            minHeapifyDown(idx);
        }
    }
private:
    int* heapArray;        // Heap of vertex indices
    int* keyArray;// sorted like position         // Corresponding weight values to other vertices
    int* position;         // Maps vertex to its position in heap
    int capacity;
    int size;

};

#endif